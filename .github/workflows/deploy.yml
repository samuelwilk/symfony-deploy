name: Symfony CI/CD Zero-Downtime Deploy

on:
  repository_dispatch:
    types: [trigger-deployment]
  push:
    branches: [main, staging]
    tags:
      - 'v*'
      - 'release-*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
    if: github.ref_type == 'branch' || github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets[format('{0}_SSH_KEY', matrix.environment | upper)] }}

      - name: Deploy to Oracle Cloud (${{ matrix.environment }})
        env:
          HOST: ${{ secrets[format('{0}_HOST', matrix.environment | upper)] }}
          DEPLOY_BASE: ${{ secrets[format('{0}_DEPLOY_PATH', matrix.environment | upper)] }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
        run: |
          ssh -o StrictHostKeyChecking=no opc@$HOST << 'EOF'
            set -e
            export RELEASE_ID=release-$(date +%Y%m%d%H%M%S)
            export RELEASE_DIR=$DEPLOY_BASE/releases/$RELEASE_ID
            export CURRENT_LINK=$DEPLOY_BASE/current

            echo ">>> Cloning new release to $RELEASE_DIR"
            mkdir -p $RELEASE_DIR
            git clone --depth=1 --branch $REF https://github.com/$REPO $RELEASE_DIR

            echo ">>> Starting containers for $RELEASE_ID"
            cd $RELEASE_DIR
            docker compose -p $RELEASE_ID up -d --build

            echo ">>> Running Symfony post-deploy tasks"
            docker compose -p $RELEASE_ID exec -T php bash -c "
              set -e
              echo '${{ secrets[format('{0}_SYMFONY_DECRYPTION_KEY', matrix.environment | upper)] }}' > config/secrets/${{ matrix.environment }}/.env.${{ matrix.environment }}.key
              php bin/console secrets:decrypt-to-local --force --env=${{ matrix.environment }}
              composer install --no-interaction --prefer-dist --optimize-autoloader
              php bin/console doctrine:migrations:migrate --no-interaction
              php bin/console cache:clear
              php bin/console cache:warmup
              php bin/console assets:install public
              chown -R www-data:www-data var vendor
            "

            echo ">>> Swapping current release"
            ln -sfn $RELEASE_DIR $CURRENT_LINK
            sudo systemctl reload nginx

            echo ">>> Cleaning old releases"
            cd $DEPLOY_BASE/releases
            ls -1t | tail -n +4 | xargs rm -rf

            echo ">>> âœ… Deployment completed: $RELEASE_ID"
          EOF
