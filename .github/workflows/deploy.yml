name: Symfony CI/CD Zero-Downtime Deploy

on:
  push:
    branches: [main] # Add more env branches here
    tags:
      - 'v*'
      - 'release-*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [production]
    environment: ${{ matrix.environment }}
    if: github.ref_type == 'branch' || github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH and deploy to ${{ matrix.environment }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
          SERVER_NAME: ${{ secrets.SERVER_NAME }}
          APP_ENV: ${{ matrix.environment }}
        run: |
          echo ">>> Starting deployment: $RELEASE_ID"

          echo ">>> Setting up SSH"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

          echo ">>> Connecting to $SSH_HOST and deploying $APP_ENV"
          ssh "$SSH_USER@$SSH_HOST" bash <<EOF
            set -euo pipefail

            export BASE_PATH=/home/$SSH_USER/symfony-deploy
            export RELEASE_ID=release-\$(date +%Y%m%d%H%M%S)
            export RELEASE_DIR=\$BASE_PATH/releases/\$RELEASE_ID
            export CURRENT_LINK=\$BASE_PATH/current
          
            mkdir -p \$BASE_PATH/releases

            echo ">>> Cloning repo to \$RELEASE_DIR"
            mkdir -p \$RELEASE_DIR
            git clone --depth=1 --branch ${{ github.ref_name }} https://github.com/${{ github.repository }} \$RELEASE_DIR

            echo ">>> Building new release"
            cd \$RELEASE_DIR
            APP_ENV=$APP_ENV \
            APP_SECRET=$APP_SECRET \
            CADDY_MERCURE_JWT_SECRET=$CADDY_MERCURE_JWT_SECRET \
            SERVER_NAME=$SERVER_NAME \
            docker compose -p \$RELEASE_ID -f compose.yaml -f compose.prod.yaml up -d --wait --build

            echo ">>> Waiting for health check"
            for i in {1..15}; do
              STATUS=\$(docker inspect --format='{{.State.Health.Status}}' \${RELEASE_ID}-php-1 || echo "starting")
              echo "Healthcheck status: \$STATUS"
              if [ "\$STATUS" = "healthy" ]; then
                break
              elif [ "\$i" -eq 15 ]; then
                echo "❌ Healthcheck failed after multiple attempts. Aborting release."
                docker compose -p \$RELEASE_ID down
                exit 1
              fi
              sleep 5
            done

            echo ">>> Swapping in new release"
            ln -sfn \$RELEASE_DIR \$CURRENT_LINK
          
            echo ">>> Stopping old release containers"
            docker ps --format '{{.Names}}' \
            | grep release- \
            | grep -v \$RELEASE_ID \
            | xargs -r docker stop
            
            echo ">>> Pruning stopped containers"
            docker container prune -f || true

            echo ">>> Cleaning up old releases (keep last 3)"
            cd \$BASE_PATH/releases

            # Determine real path the symlink points to
            CURRENT_TARGET=\$(readlink \$CURRENT_LINK)
              
            # Keep the current target + the 2 most recent *other* releases
            RELEASES=\$(ls -1t | grep -v \$(basename \$CURRENT_TARGET) | head -n -2 || true)
              
            for rel in \$RELEASES; do
              echo "Removing old release: \$rel"
              rm -rf "\$rel"
            done
          
            # Find and verify symlink target
            readlink /home/ubuntu/symfony-deploy/current
            
            # Remove all old releases except the symlink target
            cd /home/ubuntu/symfony-deploy/releases
            ls -1t | grep -v $(basename $(readlink ../current)) | xargs -r sudo rm -rf
  
            echo ">>> Disk space after cleanup"
            df -h /

            echo "✅ Deployment completed: \$RELEASE_ID"
          EOF
